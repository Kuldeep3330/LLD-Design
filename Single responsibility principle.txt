#include <iostream>
#include <string>
#include <vector>
#include <fstream>

using namespace std;

// Class for managing reports
class ReportManager {
public:
    void addReport(const string &report) {
        reports.push_back(report);
    }

    const vector<string>& getReports() const {
        return reports;
    }

private:
    vector<string> reports;
};

// Class for printing reports
class ReportPrinter {
public:
    void printReports(const vector<string> &reports) const {
        for (const auto &report : reports) {
            cout << report << endl;
        }
    }
};

// Class for saving reports to a file
class ReportSaver {
public:
    void saveReportsToFile(const vector<string> &reports, const string &filename) const {
        ofstream file(filename);
        if (file.is_open()) {
            for (const auto &report : reports) {
                file << report << endl;
            }
            file.close();
            cout << "Reports saved to " << filename << endl;
        } else {
            cerr << "Failed to open file: " << filename << endl;
        }
    }
};

int main() {
    ReportManager reportManager;
    ReportPrinter reportPrinter;
    ReportSaver reportSaver;

    // Add some reports
    reportManager.addReport("Report 1");
    reportManager.addReport("Report 2");

    // Print reports
    reportPrinter.printReports(reportManager.getReports());

    // Save reports to a file
    reportSaver.saveReportsToFile(reportManager.getReports(), "reports.txt");

    return 0;
}
-------------------------------
without SRP
#include <iostream>
#include <string>
using namespace std;

class Employee {
    string name;
    int id;

public:
    Employee(string n, int i) : name(n), id(i) {}

    void saveToDatabase() {
        // Code to save employee data to the database
        cout << "Saving " << name << " to database.\n";
    }

    void calculateSalary() {
        // Code to calculate salary
        cout << "Calculating salary for " << name << ".\n";
    }
};

int main() {
    Employee emp("John", 101);
    emp.saveToDatabase();
    emp.calculateSalary();
    return 0;
}
------------------------------
with SRP
#include <iostream>
#include <string>
using namespace std;

class Employee {
    string name;
    int id;

public:
    Employee(string n, int i) : name(n), id(i) {}
    string getName() const { return name; }
    int getId() const { return id; }
};

class EmployeeDatabase {
public:
    void save(const Employee& emp) {
        // Code to save employee data to the database
        cout << "Saving " << emp.getName() << " to database.\n";
    }
};

class SalaryCalculator {
public:
    void calculate(const Employee& emp) {
        // Code to calculate salary
        cout << "Calculating salary for " << emp.getName() << ".\n";
    }
};

int main() {
    Employee emp("John", 101);
    EmployeeDatabase db;
    SalaryCalculator sc;

    db.save(emp);
    sc.calculate(emp);

    return 0;
}

------------------------------------
Example 3: Logging System
Without SRP:
#include <iostream>
#include <fstream>
#include <string>
using namespace std;

class Logger {
    string logFile;

public:
    Logger(string file) : logFile(file) {}

    void log(string message) {
        // Display message to console
        cout << "LOG: " << message << endl;

        // Write message to file
        ofstream file(logFile, ios::app);
        if (file.is_open()) {
            file << "LOG: " << message << endl;
            file.close();
        }
    }
};

int main() {
    Logger logger("log.txt");
    logger.log("This is a log message.");
    return 0;
}
--------------------------------
with SRP
#include <iostream>
#include <fstream>
#include <string>
using namespace std;

class ConsoleLogger {
public:
    void logToConsole(string message) {
        cout << "LOG: " << message << endl;
    }
};

class FileLogger {
    string logFile;

public:
    FileLogger(string file) : logFile(file) {}

    void logToFile(string message) {
        ofstream file(logFile, ios::app);
        if (file.is_open()) {
            file << "LOG: " << message << endl;
            file.close();
        }
    }
};

int main() {
    ConsoleLogger consoleLogger;
    FileLogger fileLogger("log.txt");

    consoleLogger.logToConsole("This is a log message.");
    fileLogger.logToFile("This is a log message.");
    return 0;
}


