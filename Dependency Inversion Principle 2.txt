It states that high-level modules should not depend on low-level modules. Both should depend on abstractions

class IDataReader {
public:
    virtual void readData() = 0;
    virtual ~IDataReader() = default;
};
//2.Implement the interface in a low-level module:
class FileReader : public IDataReader {
public:
    void readData() override {
        std::cout << "Reading data from file..." << std::endl;
    }
};

//3.High-level module depends on the abstraction:
class FileManager {
private:
    IDataReader& dataReader;
public:
    FileManager(IDataReader& reader) : dataReader(reader) {}
    
    void performRead() {
        dataReader.readData();
    }
};
//client code
int main() {
    FileReader fileReader;
    FileManager fileManager(fileReader);
    fileManager.performRead();

    return 0;
}
