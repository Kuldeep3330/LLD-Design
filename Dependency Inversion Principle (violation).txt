Dependency Inversion Principle (DIP)
     "High-level modules should not depend on low-level modules. Both should depend on abstractions."

Example Without DIP
#include <iostream>
#include <string>
using namespace std;

class EmailService
{
public:
    void sendEmail(const string &message)
    {
        cout << "Sending email: " << message << endl;
    }
};

class Notification
{
public:
    Notification() : emailService() {} // Directly depends on EmailService

    void notify(const string &message)
    {
        emailService.sendEmail(message); // Tight coupling
    }

private:
    EmailService emailService;
};

int main()
{
    Notification notifier;
    notifier.notify("Hello, Dependency Inversion!");

    return 0;
}

