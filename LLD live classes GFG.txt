LLD live classes GFG

Creational	Singleton, Factory Method, Abstract Factory, Builder, Prototype
Structural	Adapter, Bridge, Composite, Decorator, Facade, Flyweight, Proxy
Behavioral	Chain of Responsibility, Command, Interpreter, Iterator, Mediator, Memento, Observer, State, Strategy, Template Method, Visitor

Creational: When you need flexible and reusable object creation.
Structural: When managing relationships between entities or simplifying system architecture.
Behavioral: When focusing on interactions and responsibilities between objects.

https://docs.google.com/document/d/1dU7ATl6MW0vwFPbt-Lw3tgm85i-xgQPboARDpHJTl5w/edit?usp=sharing
--------------------
basic
aggregation 	1 2
composition	1 2
interface	1 
inheritance	
SRP		1 2
OCP		1 2
LSP		1
ISP		1
DIP		

singleton pattern 	completed	1 1 (Ensures a class has only one instance and provides a global point of access.)
command pattern		completed	1 1 (Encapsulates a request as an object, allowing parameterization of requests and queuing them.)
proxy pattern		completed	1 1 (Provides a surrogate or placeholder for another object to control access to it.)
bridge pattern		completed	1 1 (Decouples an abstraction from its implementation, allowing them to vary independently.)
Template Method Pattern completed	1 1 (Defines the skeleton of an algorithm, letting subclasses implement specific steps.)
iterator pattern     	completed (Provides a way to access elements of a collection sequentially without exposing its underlying representation.)
composite pattern       completed	1 1 (Composes objects into tree structures to represent part-whole hierarchies.)
--------------------------------------------------
//singleton pattern
class Singleton
{
private:
    static Singleton *instance;
    Singleton()
    {
        cout << "Singleton Instance Created" << endl;
    }

public:
    // public static method to get instance
    static Singleton *getInstance()
    {
        if (instance == nullptr)
        {
            instance = new Singleton();
        }
        else
        {
            return instance;
        }
    }
    void dispaly()
    {
        cout << "single instance created: " << this << "\n";
    }
};
// intialisation of the static keyword
Singleton *Singleton::instance = nullptr;
int main()
{
    Singleton *s1 = Singleton::getInstance();
    s1->dispaly();
    // Singleton *s2 = Singleton::getInstance();
    // s2->dispaly();
    return 0;
}
--------------------------------------------------
//command pattern
#include <iostream>
#include <memory>
using namespace std;

// Command Interface
class Command
{
public:
    virtual void execute() = 0;
    virtual ~Command() = default; //1
};

// Receiver
class Light
{
public:
    void turnOn()
    {
        cout << "Light ON" << endl;
    }
    void turnOff()
    {
        cout << "Light OFF" << endl;
    }
};

// Concrete Command: TurnOnLightCommand
class TurnOnLightCommand : public Command
{
private:
    Light &light;

public:
    TurnOnLightCommand(Light &light) : light(light) {}
    void execute() override { light.turnOn(); }
};

// Concrete Command: TurnOffLightCommand
class TurnOffLightCommand : public Command
{
private:
    Light &light;

public:
    TurnOffLightCommand(Light &light) : light(light) {}
    void execute() override { light.turnOff(); }
};

// Invoker
class RemoteControl
{
private:
    Command *command = nullptr; // Store the command

public:
    void setCommand(Command *cmd)
    {
        command = cmd;
    }
    void pressButton()
    {
        if (command)
            command->execute();
    }
};

int main()
{
    Light roomLight;

    // Create commands
    TurnOnLightCommand lightOn(roomLight);
    TurnOffLightCommand lightOff(roomLight);

    // Remote control
    RemoteControl remote;

    // Turn light on
    remote.setCommand(&lightOn);
    remote.pressButton();

    // Turn light off
    remote.setCommand(&lightOff);
    remote.pressButton();

    return 0;
}
--------------------------------------------------
//proxy
class Image
{
public:
    virtual void display() const = 0;
};
class RealImage : public Image
{
private:
    string filename;

public:
    RealImage(const string &filename) : filename(filename)
    {
        loadFromDisk();
    }
    void loadFromDisk()
    {
        cout << "loading " << filename << endl;
    }
    void display() const override
    {
        cout << "display " << filename;
    }
};
class ProxyImage : public Image
{
private:
    mutable unique_ptr<RealImage> realImage;
    string filename;

public:
    ProxyImage(string filename) : filename(filename) {}
    void display() const override
    {
        if (realImage == nullptr)
        {
            realImage = make_unique<RealImage>(filename);
        }
        realImage->display();
    }
};
int main()
{
    Image *image = new ProxyImage("vasab.png");
    image->display();
}
-----------------------
bridge pattern
#include <iostream>
#include <memory>
using namespace std;

// Abstract Device Interface
class Device
{
public:
    virtual void turnOn() const = 0;
    virtual void turnOff() const = 0;
    virtual ~Device() = default;
};

// Concrete Device: TV
class TV : public Device
{
public:
    void turnOn() const override
    {
        cout << "TV on\n";
    }
    void turnOff() const override
    {
        cout << "TV off\n";
    }
};

// Concrete Device: Radio
class Radio : public Device
{
public:
    void turnOn() const override
    {
        cout << "Radio on\n";
    }
    void turnOff() const override
    {
        cout << "Radio off\n";
    }
};

// Abstract Remote Control
class RemoteControl
{
protected:
    shared_ptr<Device> device;

public:
    RemoteControl(shared_ptr<Device> dev) : device(dev) {}
    virtual void togglePower() = 0;
    virtual ~RemoteControl() = default;
};

// Concrete Implementation: BasicRemote
class BasicRemote : public RemoteControl
{
    bool isOn = false;

public:
    BasicRemote(shared_ptr<Device> dev) : RemoteControl(dev) {}
    void togglePower() override
    {
        if (isOn)
        {
            device->turnOff();
        }
        else
        {
            device->turnOn();
        }
        isOn = !isOn; // Toggle power state
    }
};

// Concrete Implementation: AdvancedRemote (Example)
class AdvancedRemote : public BasicRemote
{
public:
    AdvancedRemote(shared_ptr<Device> dev) : BasicRemote(dev) {}
    void mute()
    {
        cout << "Device muted\n";
    }
};

// Main Function
int main()
{
    auto tv = make_shared<TV>();
    auto radio = make_shared<Radio>();
    // Use BasicRemote with TV
    shared_ptr<RemoteControl> remote = make_shared<BasicRemote>(tv);
    remote->togglePower(); // Turn TV on
    remote->togglePower(); // Turn TV off
    // Use AdvancedRemote with Radio
    remote = make_shared<AdvancedRemote>(radio);
    remote->togglePower(); // Turn Radio on
    // Mute the Radio using AdvancedRemote
    dynamic_pointer_cast<AdvancedRemote>(remote)->mute();

    return 0;
}
---------------------------------------------------------
template pattern
class Game
{
public:
    virtual void initialise() = 0;
    virtual void startPlay() = 0;
    virtual void endPlay() = 0;
    void play()
    {
        initialise();
        startPlay();
        endPlay();
    }
    virtual ~Game() = default;
};
class Cricket : public Game
{
public:
    void initialise() override { cout << "cricket initialised\n"; }
    void startPlay() override { cout << "cricket starts\n"; }
    void endPlay() override { cout << "cricket ends\n"; }
};
class Basketball : public Game
{
public:
    void initialise() override { cout << "Basketball initialised\n"; }
    void startPlay() override { cout << "Basketball starts\n"; }
    void endPlay() override { cout << "Basketball ends\n"; }
};
int main()
{
    Game *game = new Cricket();
    game->play();
    game = new Basketball();
    game->play();
    return 0;
}
------------------------------------------------------
iterator method

----------------------------------
composite (is nothing but aggregation)
#include <iostream>
#include <vector>
using namespace std;
class Component
{
public:
    virtual void showDetails() = 0;
};
class Leaf : public Component
{
private:
    string name;

public:
    Leaf(const string &name) : name(name) {}
    void showDetails() override
    {
        cout << "leaf : " << name << "\n ";
    }
};
class Composite : public Component
{
private:
    vector<Component *> childrens;

public:
    void add(Component *children)
    {
        childrens.push_back(children);
    }
    void showDetails()
    {
        for (auto it : childrens)
        {
            it->showDetails();
        }
    }
};
int main()
{
    Leaf *leaf1 = new Leaf("Leaf 1");
    Leaf *leaf2 = new Leaf("Leaf 2");
    Composite *composite = new Composite();
    composite->add(leaf1);
    composite->add(leaf2);
    composite->showDetails();
    return 0;
}