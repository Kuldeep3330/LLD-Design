Liskov Substitution principle
-> B is the child of A
-> me chahta hu ki B class sirf A ko inherit hi nhi balki uski tarah behave kre
mtlb jo client hai use koi fark hi nhi lgna chahiye Parent aur child me

Broad :- ek class dusre class ki broader class (parent ya usse upar) hai
Narrow

example:-
class Animal{};
class Dog: public Animal{};
# Broad means Animal is a broad(parent) of Dog
# Narrow means Dog is a narrow(child) of Animal

# Guideline divided into 3 parts
    1. Signature rule
        Method Argument rule
        Return Type Rule
        Exception rule        
    2. Property rule
        Class Invariants Rule
        History Constraints
    3. Method rule
        PreCondition Rule
        PostCondition Rule

1. Signature rule

class Parent{
    void solve(string &str){

    }

};
class Child: Public Parent{
    void solve(string &str){ // string must be same in solve() for parent
    // as well as child but no need to get worry c++ will take care
// argument me string paas kro ya phir uski koi broader 
    }
};

###subrule 1: argument type
## jo argument type hmne parent me pass ki hai whi child me honi chahiye
## vaise koi dikkat ki baat nhi hai C++ will take itself

###subrule 2: return type rule
class Animal{};
class Dog: public Animal{};

class Parent{
    Animal* random(){

    }
};
class Child: public Parent{
    Animal* random(){ OR   Dog* random(){  //return type Anuimal ya phir uski subclass ya child na ki uska grandParent 


    }                      }
};

##jo child class hai ya to wo same return type rkhke ya phir narrow return type rkhke broad nhi rkh skta
## also known as covariance

###subrule 3:exception
class Parent{
    void m1(){
        throw run_time error
    }
};
class Child: public Parent{
    void m1(){} // 
};

âš¡ JavaScript equivalent
ðŸ’¬ Exception behavior in JS
JavaScript has only runtime exceptions.
There is no enforced rule on "throws narrower exception".
All exceptions are derived from Error.

ðŸ’¬ Important points in JS
JS does not enforce exception hierarchy rules â€” you can throw any error from an overriding method.

We manually check error type using instanceof if needed.

The concept of "narrower exceptions" is only a best practice in JS, not a language rule.

ðŸŸ¢ Summary of mapping
 Concept	                    C++	                                        JavaScript
Explicit exception spec	    Yes (but not enforced)	No
Exception type hierarchy	Standard hierarchy	    All errors derived from Error
Enforced "narrower throws"	No	                    No
Catch type checking	        catch (const Type&)	    if (e instanceof Type)

2. Property rule
    (i)class invariant rule
    (ii)History constraint rule
