#include <iostream>
#include <memory> // For std::unique_ptr (optional)

class Singleton {
private:
    // Private constructor
    Singleton() {
        std::cout << "Singleton Instance Created" << std::endl;
    }

    // Disable copy constructor and assignment operator
    Singleton(const Singleton&) = delete;
    Singleton& operator=(const Singleton&) = delete;

    // Static instance pointer
    static Singleton* instance;

public:
    // Public static method to get the instance
    static Singleton* getInstance() {
        if (instance == nullptr) {
            instance = new Singleton();
        }
        return instance;
    }

    // Example method
    void display() {
        std::cout << "Singleton Instance Address: " << this << std::endl;
    }
};

// Initialize the static instance
Singleton* Singleton::instance = nullptr;

int main() {
    Singleton* s1 = Singleton::getInstance();
    s1->display();

    Singleton* s2 = Singleton::getInstance();
    s2->display();

    return 0;
}
